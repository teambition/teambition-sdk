!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,exports,e){e(1),e(6),e(7),t.exports=e(8)},function(t,exports,e){var n;(function(t,r,o){/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.0.2
	 */
(function(){"use strict";function i(t){return"function"==typeof t||"object"==typeof t&&null!==t}function s(t){return"function"==typeof t}function u(t){return"object"==typeof t&&null!==t}function a(t){V=t}function c(t){Y=t}function f(){return function(){t.nextTick(v)}}function h(){return function(){G(v)}}function d(){var t=0,e=new tt(v),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function l(){var t=new MessageChannel;return t.port1.onmessage=v,function(){t.port2.postMessage(0)}}function p(){return function(){setTimeout(v,1)}}function v(){for(var t=0;X>t;t+=2){var e=rt[t],n=rt[t+1];e(n),rt[t]=void 0,rt[t+1]=void 0}X=0}function y(){try{var t=e(4);return G=t.runOnLoop||t.runOnContext,h()}catch(n){return p()}}function m(){}function b(){return new TypeError("You cannot resolve a promise with itself")}function _(){return new TypeError("A promises callback cannot return that same promise.")}function g(t){try{return t.then}catch(e){return ut.error=e,ut}}function w(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function O(t,e,n){Y(function(t){var r=!1,o=w(n,e,function(n){r||(r=!0,e!==n?P(t,n):T(t,n))},function(e){r||(r=!0,I(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,I(t,o))},t)}function x(t,e){e._state===it?T(t,e._result):e._state===st?I(t,e._result):A(e,void 0,function(e){P(t,e)},function(e){I(t,e)})}function j(t,e){if(e.constructor===t.constructor)x(t,e);else{var n=g(e);n===ut?I(t,ut.error):void 0===n?T(t,e):s(n)?O(t,e,n):T(t,e)}}function P(t,e){t===e?I(t,b()):i(e)?j(t,e):T(t,e)}function E(t){t._onerror&&t._onerror(t._result),k(t)}function T(t,e){t._state===ot&&(t._result=e,t._state=it,0!==t._subscribers.length&&Y(k,t))}function I(t,e){t._state===ot&&(t._state=st,t._result=e,Y(E,t))}function A(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+it]=n,o[i+st]=r,0===i&&t._state&&Y(k,t)}function k(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?C(n,r,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}function S(t,e){try{return t(e)}catch(n){return at.error=n,at}}function C(t,e,n,r){var o,i,u,a,c=s(n);if(c){if(o=S(n,r),o===at?(a=!0,i=o.error,o=null):u=!0,e===o)return void I(e,_())}else o=r,u=!0;e._state!==ot||(c&&u?P(e,o):a?I(e,i):t===it?T(e,o):t===st&&I(e,o))}function R(t,e){try{e(function(e){P(t,e)},function(e){I(t,e)})}catch(n){I(t,n)}}function F(t,e){var n=this;n._instanceConstructor=t,n.promise=new t(m),n._validateInput(e)?(n._input=e,n.length=e.length,n._remaining=e.length,n._init(),0===n.length?T(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&T(n.promise,n._result))):I(n.promise,n._validationError())}function B(t){return new ct(this,t).promise}function D(t){function e(t){P(o,t)}function n(t){I(o,t)}var r=this,o=new r(m);if(!K(t))return I(o,new TypeError("You must pass an array to race.")),o;for(var i=t.length,s=0;o._state===ot&&i>s;s++)A(r.resolve(t[s]),void 0,e,n);return o}function U(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(m);return P(n,t),n}function L(t){var e=this,n=new e(m);return I(n,t),n}function N(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function z(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function H(t){this._id=pt++,this._state=void 0,this._result=void 0,this._subscribers=[],m!==t&&(s(t)||N(),this instanceof H||z(),R(this,t))}function q(){var t;if("undefined"!=typeof r)t=r;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;(!n||"[object Promise]"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=vt)}var W;W=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var G,V,J,K=W,X=0,Y=({}.toString,function(t,e){rt[X]=t,rt[X+1]=e,X+=2,2===X&&(V?V(v):J())}),Q="undefined"!=typeof window?window:void 0,Z=Q||{},tt=Z.MutationObserver||Z.WebKitMutationObserver,et="undefined"!=typeof t&&"[object process]"==={}.toString.call(t),nt="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,rt=new Array(1e3);J=et?f():tt?d():nt?l():void 0===Q?y():p();var ot=void 0,it=1,st=2,ut=new M,at=new M;F.prototype._validateInput=function(t){return K(t)},F.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},F.prototype._init=function(){this._result=new Array(this.length)};var ct=F;F.prototype._enumerate=function(){for(var t=this,e=t.length,n=t.promise,r=t._input,o=0;n._state===ot&&e>o;o++)t._eachEntry(r[o],o)},F.prototype._eachEntry=function(t,e){var n=this,r=n._instanceConstructor;u(t)?t.constructor===r&&t._state!==ot?(t._onerror=null,n._settledAt(t._state,e,t._result)):n._willSettleAt(r.resolve(t),e):(n._remaining--,n._result[e]=t)},F.prototype._settledAt=function(t,e,n){var r=this,o=r.promise;o._state===ot&&(r._remaining--,t===st?I(o,n):r._result[e]=n),0===r._remaining&&T(o,r._result)},F.prototype._willSettleAt=function(t,e){var n=this;A(t,void 0,function(t){n._settledAt(it,e,t)},function(t){n._settledAt(st,e,t)})};var ft=B,ht=D,dt=U,lt=L,pt=0,vt=H;H.all=ft,H.race=ht,H.resolve=dt,H.reject=lt,H._setScheduler=a,H._setAsap=c,H._asap=Y,H.prototype={constructor:H,then:function(t,e){var n=this,r=n._state;if(r===it&&!t||r===st&&!e)return this;var o=new this.constructor(m),i=n._result;if(r){var s=arguments[r-1];Y(function(){C(r,o,s,i)})}else A(n,o,t,e);return o},"catch":function(t){return this.then(null,t)}};var yt=q,mt={Promise:vt,polyfill:yt};e(5).amd?(n=function(){return mt}.call(exports,e,exports,o),!(void 0!==n&&(o.exports=n))):"undefined"!=typeof o&&o.exports?o.exports=mt:"undefined"!=typeof this&&(this.ES6Promise=mt),yt()}).call(this)}).call(exports,e(2),function(){return this}(),e(3)(t))},function(t,exports){function e(){a=!1,i.length?u=i.concat(u):c=-1,u.length&&n()}function n(){if(!a){var t=setTimeout(e);a=!0;for(var n=u.length;n;){for(i=u,u=[];++c<n;)i&&i[c].run();c=-1,n=u.length}i=null,a=!1,clearTimeout(t)}}function r(t,e){this.fun=t,this.array=e}function o(){}var i,s=t.exports={},u=[],a=!1,c=-1;s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)e[o-1]=arguments[o];u.push(new r(t,e)),1!==u.length||a||setTimeout(n,0)},r.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=o,s.addListener=o,s.once=o,s.off=o,s.removeListener=o,s.removeAllListeners=o,s.emit=o,s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(t,exports){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,exports){},function(t,exports){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,exports){!function(){"use strict";function t(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function e(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){this.map={},t instanceof n?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function r(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function o(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function i(t){var e=new FileReader;return e.readAsArrayBuffer(t),o(e)}function s(t){var e=new FileReader;return e.readAsText(t),o(e)}function u(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(l.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(l.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(t){if(!l.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText=""},l.blob?(this.blob=function(){var t=r(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(i)},this.text=function(){var t=r(this);if(t)return t;if(this._bodyBlob)return s(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=r(this);return t?t:Promise.resolve(this._bodyText)},l.formData&&(this.formData=function(){return this.text().then(f)}),this.json=function(){return this.text().then(JSON.parse)},this}function a(t){var e=t.toUpperCase();return p.indexOf(e)>-1?e:t}function c(t,e){e=e||{};var r=e.body;if(c.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new n(t.headers)),this.method=t.method,this.mode=t.mode,r||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",(e.headers||!this.headers)&&(this.headers=new n(e.headers)),this.method=a(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function f(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function h(t){var e=new n,r=t.getAllResponseHeaders().trim().split("\n");return r.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),o=n.join(":").trim();e.append(r,o)}),e}function d(t,e){e||(e={}),this._initBody(t),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof n?e.headers:new n(e.headers),this.url=e.url||""}if(!self.fetch){n.prototype.append=function(n,r){n=t(n),r=e(r);var o=this.map[n];o||(o=[],this.map[n]=o),o.push(r)},n.prototype["delete"]=function(e){delete this.map[t(e)]},n.prototype.get=function(e){var n=this.map[t(e)];return n?n[0]:null},n.prototype.getAll=function(e){return this.map[t(e)]||[]},n.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},n.prototype.set=function(n,r){this.map[t(n)]=[e(r)]},n.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)};var l={blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self},p=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];c.prototype.clone=function(){return new c(this)},u.call(c.prototype),u.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new n(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var v=[301,302,303,307,308];d.redirect=function(t,e){if(-1===v.indexOf(e))throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},self.Headers=n,self.Request=c,self.Response=d,self.fetch=function(t,e){return new Promise(function(n,r){function o(){return"responseURL"in s?s.responseURL:/^X-Request-URL:/m.test(s.getAllResponseHeaders())?s.getResponseHeader("X-Request-URL"):void 0}var i;i=c.prototype.isPrototypeOf(t)&&!e?t:new c(t,e);var s=new XMLHttpRequest;s.onload=function(){var t=1223===s.status?204:s.status;if(100>t||t>599)return void r(new TypeError("Network request failed"));var e={status:t,statusText:s.statusText,headers:h(s),url:o()},i="response"in s?s.response:s.responseText;n(new d(i,e))},s.onerror=function(){r(new TypeError("Network request failed"))},s.open(i.method,i.url,!0),"include"===i.credentials&&(s.withCredentials=!0),"responseType"in s&&l.blob&&(s.responseType="blob"),i.headers.forEach(function(t,e){s.setRequestHeader(e,t)}),s.send("undefined"==typeof i._bodyInit?null:i._bodyInit)})},self.fetch.polyfill=!0}}()},function(t,exports){(function(t){!function(exports){"use strict";function t(t,n){function r(t){return this&&this.constructor===r?(this._keys=[],this._values=[],this._itp=[],this.objectOnly=n,void(t&&e.call(this,t))):new r(t)}return n||b(t,"size",{get:v}),t.constructor=r,r.prototype=t,r}function e(t){this.add?t.forEach(this.add,this):t.forEach(function(t){this.set(t[0],t[1])},this)}function n(t){return this.has(t)&&(this._keys.splice(m,1),this._values.splice(m,1),this._itp.forEach(function(t){m<t[0]&&t[0]--})),m>-1}function r(t){return this.has(t)?this._values[m]:void 0}function o(t,e){if(this.objectOnly&&e!==Object(e))throw new TypeError("Invalid value used as weak collection key");if(e!=e||0===e)for(m=t.length;m--&&!_(t[m],e););else m=t.indexOf(e);return m>-1}function i(t){return o.call(this,this._values,t)}function s(t){return o.call(this,this._keys,t)}function u(t,e){return this.has(t)?this._values[m]=e:this._values[this._keys.push(t)-1]=e,this}function a(t){return this.has(t)||this._values.push(t),this}function c(){(this._keys||0).length=this._values.length=0}function f(){return p(this._itp,this._keys)}function h(){return p(this._itp,this._values)}function d(){return p(this._itp,this._keys,this._values)}function l(){return p(this._itp,this._values,this._values)}function p(t,e,n){var r=[0],o=!1;return t.push(r),{next:function(){var i,s=r[0];return!o&&s<e.length?(i=n?[e[s],n[s]]:e[s],r[0]++):(o=!0,t.splice(t.indexOf(r),1)),{done:o,value:i}}}}function v(){return this._values.length}function y(t,e){for(var n=this.entries();;){var r=n.next();if(r.done)break;t.call(e,r.value[1],r.value[0],this)}}var m,b=Object.defineProperty,_=function(t,e){return isNaN(t)?isNaN(e):t===e};"undefined"==typeof WeakMap&&(exports.WeakMap=t({"delete":n,clear:c,get:r,has:s,set:u},!0)),"undefined"!=typeof Map&&"function"==typeof(new Map).values&&(new Map).values().next||(exports.Map=t({"delete":n,has:s,get:r,set:u,keys:f,values:h,entries:d,forEach:y,clear:c})),"undefined"!=typeof Set&&"function"==typeof(new Set).values&&(new Set).values().next||(exports.Set=t({has:i,add:a,"delete":n,clear:c,keys:h,values:h,entries:l,forEach:y})),"undefined"==typeof WeakSet&&(exports.WeakSet=t({"delete":n,add:a,clear:c,has:i},!0))}("undefined"!=typeof exports&&"undefined"!=typeof t?t:window)}).call(exports,function(){return this}())},function(t,exports,e){function n(t){for(var e in t)exports.hasOwnProperty(e)||(exports[e]=t[e])}n(e(9)),n(e(12))},function(t,exports,e){"use strict";var n,r=e(10),o=["Version","Type","Id","Path1","Path2","Path3"],i=function(){function t(){this.opts={headers:{Accept:"application/json","Content-Type":"application/json"}},this.opts.credentials="include",n="https://www.teambition.com/api"}return t.prototype.setAPIHost=function(t){n=t},t.prototype.setToken=function(t){delete this.opts.credentials,this.opts.headers.Authorization="OAuth2 "+t,n="https://api.teambition.com"},t.prototype.get=function(t){var e=this.buildURI(t);return fetch(e,r.assign({method:"get"},this.opts)).then(function(t){return t.json()})},t.prototype.post=function(t,e){var n=this.buildURI(t);return fetch(n,r.assign({method:"post",body:JSON.stringify(e)},this.opts)).then(function(t){return t.json()})},t.prototype.put=function(t,e){var n=this.buildURI(t);return fetch(n,r.assign({method:"put",body:JSON.stringify(e)},this.opts)).then(function(t){return t.json()})},t.prototype["delete"]=function(t){var e=this.buildURI(t);return fetch(e,r.assign({method:"delete"},this.opts)).then(function(t){return t.json()})},t.prototype.buildURI=function(t){var e=[],i=[];r.forEach(t,function(t,n){var r=o.indexOf(n);-1!==r?e[r]=t:i.push(n+"="+t)});var s=e[0];"undefined"!=typeof s&&(e[0]="/"+s);var u=n+e.join("/");return u=i.length?u+"?"+i.join("&"):u},t}();exports.tbFetch=new i},function(t,exports,e){"use strict";var n=e(11);exports.forEach=function(t,e){var n;if(t instanceof Array){n=t.length;for(var r=0;n>r;r++)e(t[r],r)}else{var o,i=Object.keys(t);n=i.length;for(var r=0;n>r;r++)o=i[r],e(t[o],o)}},exports.assign=function(t,e){return exports.forEach(e,function(n,r){t[r]=e[r]}),t},exports.clone=function(t){if("undefined"!=typeof t&&"object"==typeof t){var e;return e=t instanceof Array?new Array:Object.create(null),exports.forEach(t,function(t,n){"object"==typeof t&&(t?e[n]=exports.clone(t):e[n]=t),e[n]=t}),e}};var r=function(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)},o=[];exports.uuid=function(){for(var t=r()+r();-1!==o.indexOf(t);)t=r()+r();return o.push(t),t},exports.datasToSchemas=function(t,e){var r=new Array;return exports.forEach(t,function(t,o){r.push(n.setSchema(e,t))}),r}},function(t,exports,e){"use strict";var n=e(10);exports.setSchema=function(t,e){return t.$$keys.forEach(function(n){t[n]=e[n]}),t.$$data=e,n.forEach(t,function(n,r){"$$data"===r?Object.defineProperty(t,r,{enumerable:!1,configurable:!0}):"$$keys"===r?Object.defineProperty(t,r,{enumerable:!1,set:function(t){n=t},get:function(){return n}}):("undefined"==typeof e[r]&&t.$$keys.add(r),Object.defineProperty(t,r,{get:function(){return t.$$data?t.$$data[r]:void 0},set:function(e){t.$$data&&(t.$$data[r]=e,t.$$keys["delete"](r))},configurable:!0}))}),t};var r=function(){function t(){this.$$keys=new Set}return t}();exports.Schema=r},function(t,exports,e){function n(t){for(var e in t)exports.hasOwnProperty(e)||(exports[e]=t[e])}n(e(13)),n(e(19)),n(e(23))},function(t,exports,e){"use strict";var n=e(9),r=e(14);exports.UserAPI={getUserMe:function(){var t=r["default"].get();return t?new Promise(function(e,n){e(t)}):n.tbFetch.get({Type:"users",Id:"me"}).then(function(t){return r["default"].set(t)})},update:function(t){return n.tbFetch.put({Type:"users",Id:"me"},t).then(function(t){return r["default"].update(t),t})},addEmail:function(t){return n.tbFetch.post({Type:"users",Id:"email"},{email:t}).then(function(t){return r["default"].updateEmail(t),t})},bindPhone:function(t,e){return n.tbFetch.put({Type:"users",Id:"phone"},{phone:t,vcode:e}).then(function(e){r["default"].update({phone:t})})}}},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(15),o=function(t){function e(){t.apply(this,arguments),this.namespace="user:me"}return n(e,t),e.prototype.set=function(t){return this.setOne(this.namespace,t)},e.prototype.get=function(){return this.getOne(this.namespace)},e.prototype.update=function(t){this.updateOne(this.namespace,t)},e.prototype.updateEmail=function(t){this.updateOne(this.namespace,{emails:t})},e}(r["default"]);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=new o},function(t,exports,e){"use strict";var n=e(16),r=function(){function t(){}return t.prototype.setOne=function(t,e){return n["default"].storeOne(t,e),n["default"].getOne(t)},t.prototype.setCollection=function(t,e){return n["default"].storeCollection(t,e),n["default"].getOne(t)},t.prototype.getOne=function(t){return n["default"].getOne(t)},t.prototype.updateOne=function(t,e){var r=n["default"].getOne(t);r&&n["default"].updateOne(t,e)},t.prototype.removeOne=function(t){return n["default"]["delete"](t)},t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=r},function(t,exports,e){"use strict";var n=e(10),r=e(17),o=e(18),i=function(){function t(){this.data={},this.timeoutIndex={},this.typeIndex={},this.dataMaps={},this.collectionIndex={}}return t.prototype.storeOne=function(t,e,n){var o=this;if(void 0===n&&(n=0),!this.data[t]){var i=this.data[t]=e;if(n&&"number"==typeof n){var s=window.setTimeout(function(){delete o.data[t]},n);this.timeoutIndex[t]={timer:s,begin:Date.now(),expire:n}}r.trackObject(i),this.typeIndex[t]="object"}},t.prototype.storeCollection=function(t,e,o){var i=this;void 0===o&&(o=0);var s=this.collectionIndex[t]=[];if(!this.data[t]){var u=[];if(n.forEach(e,function(e,n){var r=i.getOne(e._id);r?u.push(r):(u.push(e),i.storeOne(e._id,e));var o=i.dataMaps[e._id];o?o.push(t):i.dataMaps[e._id]=[t],s.push(e._id)}),this.data[t]=u,o&&"number"==typeof o){var a=window.setTimeout(function(){delete i.data[t]},o);this.timeoutIndex[t]={timer:a,begin:Date.now(),expire:o}}r.trackCollection(t,u),this.typeIndex[t]="collection"}},t.prototype.updateCollection=function(t,e){var r=this,o=this.data[t];if(o&&e instanceof Array){var i=this.collectionIndex[t];n.forEach(e,function(t,e){var s=o[e];if(s._id===t._id)n.assign(s,t);else{var u=t._id;if(-1===i.indexOf(u))o.splice(e,0,t),i.splice(e,0,u),r.storeOne(t._id,t);else{var a=i.indexOf(u,e);o.splice(a,1),i.splice(a,1),o.splice(e,0,t),i.splice(e,0,u)}}})}},t.prototype.updateOne=function(t,e,r){var o=this;void 0===r&&(r=0);var i=n.clone(e),s=this.data[t];if(!s)throw"Data is not existed, can not update";if("object"!=typeof e)throw"Patch target should be Object";if(s=n.assign(s,i),r&&"number"==typeof r){var u=this.timeoutIndex[t].timer;this.timeoutIndex[t].expire=r,this.timeoutIndex[t].begin=Date.now(),window.clearTimeout(u),window.setTimeout(function(){delete o.data[t]},r)}this.data[t]=s},t.prototype.getOne=function(t){var e,i=this.data[t];return i?("collection"===this.typeIndex[t]?(e=n.clone(i),r.trackOne(e,t)):(e=new o.BaseObject(i),r.trackOne(e)),e):!1},t.prototype["delete"]=function(t){var e=this;delete this.data[t];var r=this.dataMaps[t];r&&r.length&&n.forEach(r,function(n){var r=e.collectionIndex[n],o=e.data[n],i=r.indexOf(t);r.splice(i,1),o.splice(i,1)})},t.prototype.getExpire=function(t){var e=this.timeoutIndex[t];return e.begin-e.expire},t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=new i},function(t,exports,e){"use strict";var n=e(10),r={};exports.trackOne=function(t,e){var n=e?e:t._id;n&&-1===r[n].indexOf(t)&&r[n].push(t)},exports.trackObject=function(t){var e=t._id;e&&(r[e]=[],n.forEach(t,function(o,i){Object.defineProperty(t,i,{set:function(t){n.forEach(r[e],function(e){e[i]=t}),o=t},get:function(){return o},enumerable:!0,configurable:!0})}))},exports.trackCollection=function(t,e){if(!(e instanceof Array))throw new Error("Could not track a none array object");r[t]=[];var o=e.splice,i=e.push;e.splice=function(){return n.forEach(r[t],function(t){o.apply(t,arguments)}),o.apply(e,arguments)},e.push=function(){return n.forEach(r[t],function(t){i.apply(t,arguments)}),i.apply(e,arguments)}}},function(t,exports,e){"use strict";var n=e(10),r=1;exports.ObjectIndex={};var o=function(){function t(t){var e=this;this.$id="$"+r;var o=n.clone(t),i=exports.ObjectIndex["$"+r]={dataKeys:[]};n.forEach(o,function(t,n){i.dataKeys.push(n),e[n]=t}),r++}return t}();exports.BaseObject=o},function(t,exports,e){"use strict";var n=e(9),r=e(20),o=e(21);exports.OrganizationAPI={getOrgs:function(){var t=r["default"].getAll();return t?Promise.resolve(t):n.tbFetch.get({Type:"organizations"}).then(function(t){return r["default"].setAll(t)})},getOne:function(t){var e=r["default"].get(t);return e?Promise.resolve(e):n.tbFetch.get({Type:"organizations",Id:t}).then(function(t){return r["default"].set(t)})},getMembers:function(t){var e=o["default"].getOrgMembers(t);return e?Promise.resolve(e):n.tbFetch.get({Version:"V2",Type:"organizations",Id:t,Path1:"members"}).then(function(e){return o["default"].addOrgMembers(t,e)})}}},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(15),o=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.getAll=function(){return this.getOne("organization")},e.prototype.get=function(t){return this.getOne(t)},e.prototype.setAll=function(t){return this.setCollection("organization",t)},e.prototype.set=function(t){return this.setOne(t._id,t)},e}(r["default"]);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=new o},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(15),o=e(10),i=e(22),s=e(11),u=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.addProjectMembers=function(t,e){var n=[];return o.forEach(e,function(t){n.push(s.setSchema(new i["default"],t))}),this.setCollection("members:"+t,n),n},e.prototype.getProjectMembers=function(t){return this.getOne("members:"+t)},e.prototype.removeMember=function(t){this.removeOne(t)},e.prototype.addOrgMembers=function(t,e){var n=[];return o.forEach(e,function(t){n.push(s.setSchema(new i["default"],t))}),this.setCollection("members:"+t,n),n},e.prototype.getOrgMembers=function(t){return this.getOne("members:"+t)},e}(r["default"]);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=new u},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(11),o=function(t){function e(){t.apply(this,arguments),this._id=void 0,this._boundToObjectId=void 0,this.boundToObjectType=void 0,this._roleId=void 0,this.visited=void 0,this.joined=void 0,this.pushStatus=void 0,this.nickname=void 0,this.nicknamePy=void 0,this.nicknamePinyin=void 0,this.hasVisited=void 0,this._memberId=void 0,this.phone=void 0,this.location=void 0,this.website=void 0,this.latestActived=void 0,this.isActive=void 0,this.email=void 0,this.name=void 0,this.avatarUrl=void 0,this.title=void 0,this.pinyin=void 0,this.py=void 0}return n(e,t),e}(r.Schema);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=o},function(t,exports,e){"use strict";var n=e(9),r=e(21),o=e(24);exports.ProjectAPI={getMembers:function(t){var e=r["default"].getProjectMembers(t);return e?new Promise(function(t,n){t(e)}):n.tbFetch.get({Type:"projects",Id:t,Path1:"members"}).then(function(e){return r["default"].addProjectMembers(t,e)})},deleteMember:function(t){return n.tbFetch["delete"]({Type:"members",Id:t}).then(function(){r["default"].removeMember(t)})},getAll:function(){var t=o["default"].getProjects();return t?new Promise(function(e,n){e(t)}):n.tbFetch.get({Type:"projects"}).then(function(t){return o["default"].addProjects(t)})}}},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(15),o=e(10),i=e(25),s=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.addProjects=function(t){var e=o.datasToSchemas(t,new i["default"]);return this.setCollection("projects",e),e},e.prototype.getProjects=function(){return this.getOne("projects")},e}(r["default"]);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=new s},function(t,exports,e){"use strict";var n=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},r=e(11),o=function(t){function e(){t.apply(this,arguments),this._id=void 0,this.name=void 0,this._creatorId=void 0,this.logo=void 0,this.py=void 0,this.pinyin=void 0,this.description=void 0,this.category=void 0,this._organizationId=void 0,this.navigation=void 0,this.visibility=void 0,this.created=void 0,this.updated=void 0,this.isArchived=void 0,this.inviteLink=void 0,this.isStar=void 0,this.hasRight=void 0,this.hasOrgRight=void 0,this.organization=void 0,this.forksCount=void 0,this.tasksCount=void 0,this.postsCount=void 0,this.eventsCount=void 0,this.worksCount=void 0,this.tagsCount=void 0,this._defaultRoleId=void 0,this.creator=void 0,this.unreadCount=void 0,this.unreadMessageCount=void 0,this.pushStatus=void 0,this.canQuit=void 0,this.canDelete=void 0,this.canArchive=void 0,this.canTransfer=void 0,this._roleId=void 0,this.link=void 0,this.mobileInviteLink=void 0,this.signCode=void 0,this.starsCount=void 0,this._rootCollectionId=void 0,this._defaultCollectionId=void 0,this.shortLink=void 0,this.calLink=void 0,this.taskCalLink=void 0,this._orgRoleId=void 0}return n(e,t),e}(r.Schema);Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=o}]);
//# sourceMappingURL=data:application/json;base64,